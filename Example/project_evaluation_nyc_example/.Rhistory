dyke[idx_policy[2],],
no_policy[idx_nopolicy[3],],
dyke[idx_policy[3],],
no_policy[idx_nopolicy[4],],
dyke[idx_policy[4],],
no_policy[idx_nopolicy[5],],
dyke[idx_policy[5],],
no_policy[idx_nopolicy[6],],
dyke[idx_policy[6],],
no_policy[idx_nopolicy[7],],
dyke[idx_policy[7],],
no_policy[idx_nopolicy[8],],
dyke[idx_policy[8],],
no_policy[idx_nopolicy[9],],
dyke[idx_policy[9],],
no_policy[idx_nopolicy[10],],
dyke[idx_policy[10],]),
name = factor(c( rep(10, length(no_policy[idx_nopolicy[1],]) + length(dyke[idx_policy[1],]) ),
rep(20, length(no_policy[idx_nopolicy[2],]) + length(dyke[idx_policy[2],]) ),
rep(30, length(no_policy[idx_nopolicy[3],]) + length(dyke[idx_policy[3],]) ),
rep(40, length(no_policy[idx_nopolicy[4],]) + length(dyke[idx_policy[4],]) ),
rep(50, length(no_policy[idx_nopolicy[5],]) + length(dyke[idx_policy[5],]) ),
rep(60, length(no_policy[idx_nopolicy[6],]) + length(dyke[idx_policy[6],]) ),
rep(70, length(no_policy[idx_nopolicy[7],]) + length(dyke[idx_policy[7],]) ),
rep(80, length(no_policy[idx_nopolicy[8],]) + length(dyke[idx_policy[8],]) ),
rep(90, length(no_policy[idx_nopolicy[9],]) + length(dyke[idx_policy[9],]) ),
rep(100, length(no_policy[idx_nopolicy[10],]) + length(dyke[idx_policy[10],]) ))),
Adaptation =  rep( c(rep("No Adaptation", length(no_policy[idx_nopolicy[1],])),
rep("Dike", length(dyke[idx_nopolicy[1],]))),10 )
)
df$Adaptation = factor(df$Adaptation,
levels = c("No Adaptation",
"Dike"))
group.colors <- c("No Adaptation" = "#FF3333",
"Dike" = "#3361FF")
f = ggplot(df, aes( x = name,
y = value,
fill  = Adaptation))
f  = f + geom_boxplot()
f = f + theme_bw()
f = f + xlab("Years") + ylab("Premium Distribution ($Billion)")
f = f + scale_fill_manual(values=group.colors)
f = f + theme(axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 17),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
legend.text = element_text(size= 17),
legend.title = element_text(size= 17))
f
ggsave(filename = "Premium_Distribution_dyke_time_CPH.png",
plot = f,
device="png",
width =7,
height = 7,
dpi = 600)
df = data.frame(value = c( no_policy[idx_nopolicy[1],],
dyke[idx_policy[1],],
no_policy[idx_nopolicy[2],],
dyke[idx_policy[2],],
no_policy[idx_nopolicy[3],],
dyke[idx_policy[3],],
no_policy[idx_nopolicy[4],],
dyke[idx_policy[4],],
no_policy[idx_nopolicy[5],],
dyke[idx_policy[5],],
no_policy[idx_nopolicy[6],],
dyke[idx_policy[6],],
no_policy[idx_nopolicy[7],],
dyke[idx_policy[7],],
no_policy[idx_nopolicy[8],],
dyke[idx_policy[8],],
no_policy[idx_nopolicy[9],],
dyke[idx_policy[9],],
no_policy[idx_nopolicy[10],],
dyke[idx_policy[10],]),
name = factor(c( rep(10, length(no_policy[idx_nopolicy[1],]) + length(dyke[idx_policy[1],]) ),
rep(20, length(no_policy[idx_nopolicy[2],]) + length(dyke[idx_policy[2],]) ),
rep(30, length(no_policy[idx_nopolicy[3],]) + length(dyke[idx_policy[3],]) ),
rep(40, length(no_policy[idx_nopolicy[4],]) + length(dyke[idx_policy[4],]) ),
rep(50, length(no_policy[idx_nopolicy[5],]) + length(dyke[idx_policy[5],]) ),
rep(60, length(no_policy[idx_nopolicy[6],]) + length(dyke[idx_policy[6],]) ),
rep(70, length(no_policy[idx_nopolicy[7],]) + length(dyke[idx_policy[7],]) ),
rep(80, length(no_policy[idx_nopolicy[8],]) + length(dyke[idx_policy[8],]) ),
rep(90, length(no_policy[idx_nopolicy[9],]) + length(dyke[idx_policy[9],]) ),
rep(100, length(no_policy[idx_nopolicy[10],]) + length(dyke[idx_policy[10],]) ))),
Adaptation =  rep( c(rep("No Adaptation", length(no_policy[idx_nopolicy[1],])),
rep("Dike", length(dyke[idx_nopolicy[1],]))),10 )
)
df$Adaptation = factor(df$Adaptation,
levels = c("No Adaptation",
"Dike"))
group.colors <- c("No Adaptation" = "#FF3333",
"Dike" = "#3361FF")
f = ggplot(df, aes( x = name,
y = value,
fill  = Adaptation))
f  = f + geom_boxplot()
f = f + theme_bw()
f = f + xlab("Years") + ylab("Premium Distribution ($Billion)")
f = f + scale_fill_manual(values=group.colors)
f = f + theme(axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 17),
axis.title.x = element_text(size = 17),
axis.title.y = element_text(size = 17),
legend.text = element_text(size= 20),
legend.title = element_text(size= 20))
f
f
require('extRemes')
require('gsl')
require(zoo)
require(lubridate)
require(dplyr)
setwd("./data/nyc")
getwd()
setwd("~/")
getwd()
setwd("~/")
setwd("./data_processing_example")
setwd("~/data_processing_example")
setwd("./code_soa/Example/data_processing_example")
setwd("C:/Users/matte/Desktop/SOA project/code_soa")
setwd("./Example/data_processing_example")
setwd("C:/Users/matte/Desktop/SOA project/code_soa")
getwd()
setwd("./Example/data_processing_example")
getwd()
############################ FUNCTIONS #######################################
LR_test_MaxTideRes = function(covariates, covariates.list.location, covariates.list.scale,
use.phi = FALSE, type = "GEV",method = "GMLE" ){
# This function produces the LR test for each coefficient in the GEV regression.
formula.loc = as.formula(paste("~",  paste(covariates.list.location, collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale, collapse = "+")))
model1 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
pvalue.location = data.frame(matrix(0,
nrow = 1,
ncol = length(covariates.list.location)))
llik1 = model1$results$value
for ( i in 1:length(covariates.list.location)){
formula.loc = as.formula(paste("~",  paste(covariates.list.location[-i], collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale, collapse = "+")))
model0 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
llik0 = model0$results$value
pvalue.location[1,i] = lr.test(model0,model1)$p.value
}
colnames(pvalue.location) = covariates.list.location
rownames(pvalue.location) = "location"
pvalue.scale = data.frame(matrix(0,
nrow = 1,
ncol = length(covariates.list.scale)))
for ( i in 1:length(covariates.list.scale)){
formula.loc = as.formula(paste("~",  paste(covariates.list.location, collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale[-i], collapse = "+")))
model0 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
llik0 = model0$results$value
pvalue.scale[1,i] = lr.test(model0,model1)$p.value
}
colnames(pvalue.scale) = covariates.list.scale
rownames(pvalue.scale) ="scale"
out = list(pvalue.location, pvalue.scale)
names(out) = c("location", "scale")
return(out)
}
setwd("./Example/data_processing_example")
data_hourly =  read.csv(file = paste("hourly_series_predict", ".csv", sep=""),
sep=",",
header=TRUE)
data_hourly$TideRes = data_hourly$wl-data_hourly$wlh
max_TideRes = data.frame(aggregate(data_hourly$TideRes,
data.frame(as.yearmon(data_hourly$time)),
FUN="max"))
names(max_TideRes) = c('Time','MaxTideRes')
max_WaterLvl = data.frame(aggregate(data_hourly$wl,
data.frame(as.yearmon(data_hourly$time)),
FUN="max"))
names(max_WaterLvl) = c('Time','MaxWaterLvl')
yearly_median = aggregate(data_hourly$TideRes,
data.frame(year(data_hourly$time)),
FUN = "median")
names(yearly_median) = c("Year", "Median")
yearly_mean = aggregate(data_hourly$TideRes,
data.frame(year(data_hourly$time)),
FUN = "mean")
names(yearly_mean) = c("Year", "Mean")
monthly_obs = aggregate(data_hourly$TideRes,
data.frame(as.yearmon(data_hourly$time)),
FUN = "length")
colnames(monthly_obs) = c("Year", "Observations")
monthly_obs$Observations = monthly_obs$Observations/max(monthly_obs$Observations)
data_monthly = merge(x = max_WaterLvl,
y = max_TideRes,
by = "Time",
all.y = TRUE)
data_monthly$YearlyMedian = 0
data_monthly$YearlyMean = 0
for ( t in 1:length(data_monthly$Time)){
data_monthly$YearlyMedian[t] = yearly_median$Median[yearly_median$Year == year(data_monthly$Time[t])]
data_monthly$YearlyMean[t] = yearly_mean$Mean[yearly_mean$Year == year(data_monthly$Time[t])]
}
data_monthly$MaxDeTrend = data_monthly$MaxWaterLvl-data_monthly$YearlyMedian
data_monthly$Observation = monthly_obs$Observations
data_monthly = subset(data_monthly,data_monthly$Time>=1950)
data_monthly = subset(data_monthly, data_monthly$Time<2019)
data_monthly$MaxTideResDetrend = data_monthly$MaxTideRes - abs(data_monthly$YearlyMean)
data_monthly = subset(data_monthly, data_monthly$Observation>0.6)
### Covariates
# From MenÃ©ndez1 and Philip L. Woodworth (2010) three set up for Sea Level
covariates = data.frame(Time = data_monthly$Time,
LinearTrend = 1:length(data_monthly$Time)/12,
ExpTrend = exp((1:length(data_monthly$Time))/12),
AnnCos = cos( 2*pi*c(1:length(data_monthly$Time))/12 ),
AnnSin = sin( 2*pi*c(1:length(data_monthly$Time))/12 ),
AnnCos2 = cos( 4*pi*c(1:length(data_monthly$Time))/12 ),
AnnSin2 = sin( 4*pi*c(1:length(data_monthly$Time))/12 ),
NodalCos = cos( 2*pi*c(1:length(data_monthly$Time))/(12*18.6)),
NodalSin = sin( 2*pi*c(1:length(data_monthly$Time))/(12*18.6)),
PerigeanCos =cos( 2*pi*c(1:length(data_monthly$Time))/(12*4.4)),
PerigeanSin = sin(2*pi*c(1:length(data_monthly$Time))/(12*4.4))
)
getwd()
setwd("C:/Users/matte/Desktop/SOA project/code_soa")
setwd("./Example/data_processing_example")
data_hourly =  read.csv(file = paste("hourly_series_predict", ".csv", sep=""),
sep=",",
header=TRUE)
data_hourly$TideRes = data_hourly$wl-data_hourly$wlh
max_TideRes = data.frame(aggregate(data_hourly$TideRes,
data.frame(as.yearmon(data_hourly$time)),
FUN="max"))
names(max_TideRes) = c('Time','MaxTideRes')
max_WaterLvl = data.frame(aggregate(data_hourly$wl,
data.frame(as.yearmon(data_hourly$time)),
FUN="max"))
names(max_WaterLvl) = c('Time','MaxWaterLvl')
yearly_median = aggregate(data_hourly$TideRes,
data.frame(year(data_hourly$time)),
FUN = "median")
names(yearly_median) = c("Year", "Median")
yearly_mean = aggregate(data_hourly$TideRes,
data.frame(year(data_hourly$time)),
FUN = "mean")
names(yearly_mean) = c("Year", "Mean")
monthly_obs = aggregate(data_hourly$TideRes,
data.frame(as.yearmon(data_hourly$time)),
FUN = "length")
colnames(monthly_obs) = c("Year", "Observations")
monthly_obs$Observations = monthly_obs$Observations/max(monthly_obs$Observations)
data_monthly = merge(x = max_WaterLvl,
y = max_TideRes,
by = "Time",
all.y = TRUE)
data_monthly$YearlyMedian = 0
data_monthly$YearlyMean = 0
for ( t in 1:length(data_monthly$Time)){
data_monthly$YearlyMedian[t] = yearly_median$Median[yearly_median$Year == year(data_monthly$Time[t])]
data_monthly$YearlyMean[t] = yearly_mean$Mean[yearly_mean$Year == year(data_monthly$Time[t])]
}
data_monthly$MaxDeTrend = data_monthly$MaxWaterLvl-data_monthly$YearlyMedian
data_monthly$Observation = monthly_obs$Observations
data_monthly = subset(data_monthly,data_monthly$Time>=1950)
data_monthly = subset(data_monthly, data_monthly$Time<2019)
data_monthly$MaxTideResDetrend = data_monthly$MaxTideRes - abs(data_monthly$YearlyMean)
data_monthly = subset(data_monthly, data_monthly$Observation>0.6)
### Covariates
# From MenÃ©ndez1 and Philip L. Woodworth (2010) three set up for Sea Level
covariates = data.frame(Time = data_monthly$Time,
LinearTrend = 1:length(data_monthly$Time)/12,
ExpTrend = exp((1:length(data_monthly$Time))/12),
AnnCos = cos( 2*pi*c(1:length(data_monthly$Time))/12 ),
AnnSin = sin( 2*pi*c(1:length(data_monthly$Time))/12 ),
AnnCos2 = cos( 4*pi*c(1:length(data_monthly$Time))/12 ),
AnnSin2 = sin( 4*pi*c(1:length(data_monthly$Time))/12 ),
NodalCos = cos( 2*pi*c(1:length(data_monthly$Time))/(12*18.6)),
NodalSin = sin( 2*pi*c(1:length(data_monthly$Time))/(12*18.6)),
PerigeanCos =cos( 2*pi*c(1:length(data_monthly$Time))/(12*4.4)),
PerigeanSin = sin(2*pi*c(1:length(data_monthly$Time))/(12*4.4))
)
# Climate indexes
nao = read.csv("nao.csv", header = F)
nao = subset(nao, nao$V1<=2018)
nino = read.csv("Nino 34.csv")
nino = subset(nino, nino$X.1>=1950 & nino$X.1<2019)
time_range = format(seq(ymd('1950-01-01'),ymd('2018-12-31'),by='month'), "%Y-%m")
missing_months = setdiff(as.yearmon(time_range), as.yearmon(data_monthly$Time
) )
index_keep = is.na(match(as.yearmon(time_range), as.yearmon(missing_months)))
nao_values = unlist(nao[,2:13])
nao_values = nao_values[index_keep]
nino_values = unlist(nino[,3:14])
nino_values = nino_values[index_keep]
covariates$NAO = nao_values
covariates$NINO = nino_values
covariates$MaxWaterLvl = data_monthly$MaxWaterLvl
covariates$MaxTideRes = data_monthly$MaxTideRes
covariates$MaxDeTrend = data_monthly$MaxDeTrend
covariates$MaxTideResDeTrend = data_monthly$MaxTideResDetrend
covariates$LagNAO = lag(covariates$NAO)
covariates$LagNINO = lag(covariates$NINO)
covariates= covariates[-1,]
model_stationary = fevd(x =MaxTideResDeTrend,
data = covariates,
location.fun = ~1,
scale.fun = ~1,
shape = ~1,
use.phi = T,
type = "GEV",
method = "GMLE",
units = "MM"
)
model_stationary
covariates.list.location = c("LinearTrend",
#"ExpTrend")
"AnnCos",
"AnnSin",
#"AnnCos2",
#"AnnSin2")
"NodalCos",
#"NodalSin")
"PerigeanCos",
"NAO",
"NINO",
"NAO:NINO")
covariates.list.scale = c(#"LinearTrend",
#"ExpTrend")
#"AnnCos",
"AnnSin",
#"AnnCos2")
"AnnSin2",
"NodalCos",
#"NodalSin")
"PerigeanCos",
"NAO",
"NINO",
"NAO:NINO")
formula.loc = as.formula(paste("~",  paste(covariates.list.location, collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale, collapse = "+")))
model_nyc = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = T,
type = "GEV",
method = "GMLE"
)
pvalue_results_nyc = LR_test_MaxTideRes(covariates = covariates,
covariates.list.location = covariates.list.location,
covariates.list.scale = covariates.list.scale,
use.phi = T,
type = "GEV",
method = "GMLE")
############################ FUNCTIONS #######################################
LR_test_MaxTideRes = function(covariates, covariates.list.location, covariates.list.scale,
use.phi = FALSE, type = "GEV",method = "GMLE" ){
# This function produces the LR test for each coefficient in the GEV regression.
formula.loc = as.formula(paste("~",  paste(covariates.list.location, collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale, collapse = "+")))
model1 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
pvalue.location = data.frame(matrix(0,
nrow = 1,
ncol = length(covariates.list.location)))
llik1 = model1$results$value
for ( i in 1:length(covariates.list.location)){
formula.loc = as.formula(paste("~",  paste(covariates.list.location[-i], collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale, collapse = "+")))
model0 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
llik0 = model0$results$value
pvalue.location[1,i] = lr.test(model0,model1)$p.value
}
colnames(pvalue.location) = covariates.list.location
rownames(pvalue.location) = "location"
pvalue.scale = data.frame(matrix(0,
nrow = 1,
ncol = length(covariates.list.scale)))
for ( i in 1:length(covariates.list.scale)){
formula.loc = as.formula(paste("~",  paste(covariates.list.location, collapse = "+")))
formula.scale = as.formula(paste("~",  paste(covariates.list.scale[-i], collapse = "+")))
model0 = fevd(x = MaxTideResDeTrend,
data = covariates,
location.fun = formula.loc,
scale.fun = formula.scale,
shape = ~1,
use.phi = use.phi,
type = type,
method = method
)
llik0 = model0$results$value
pvalue.scale[1,i] = lr.test(model0,model1)$p.value
}
colnames(pvalue.scale) = covariates.list.scale
rownames(pvalue.scale) ="scale"
out = list(pvalue.location, pvalue.scale)
names(out) = c("location", "scale")
return(out)
}
pvalue_results_nyc = LR_test_MaxTideRes(covariates = covariates,
covariates.list.location = covariates.list.location,
covariates.list.scale = covariates.list.scale,
use.phi = T,
type = "GEV",
method = "GMLE")
pvalue_results_nyc
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './tables/'
fig=  './figures/'
getwd()
setwd("C:/Users/matte/Desktop/SOA project/code_soa")
setwd("./Example/project_evaluation_nyc_example")
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './tables/'
fig=  './figures/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './tables/'
fig=  './figures/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
source(paste("parameters.R",sep=''))
source(paste("investment_analysis.R",sep=''))
fig
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './output/'
fig=  './output/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
fig
source(paste("parameters.R",sep=''))
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './output/'
fig=  './output/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
#== 1. Get parameters for NYC case study
source(paste("parameters.R",sep=''))
source(paste("investment_analysis.R",sep=''))
source(paste("sensitivity_analysis_discount.R",sep=''))
source(paste("sensitivity_analysis_slr.R",sep=''))
source(paste("sensitivity_analysis_sigma.R",sep=''))
source(paste("sensitivity_analysis_sigma.R",sep=''))
opath
source(paste("loss_distribution_NYC.R",sep=''))
source(paste("loss_distribution_NYC.R",sep=''))
source(paste("loss_distribution_NYC.R",sep=''))
tab
outpth
outpath
write.table(results,paste(opath, "Quantile_Dike_NYC.csv"), sep = "&")
ggsave(filename = paste(opath,"Loss_Distribution_dike_NYC.eps"),
plot = f,
device="eps",
dpi = 600)
source(paste("sensitivity_analysis_loss_distribution.R",sep=''))
source(paste("sensitivity_analysis_loss_distribution.R",sep=''))
