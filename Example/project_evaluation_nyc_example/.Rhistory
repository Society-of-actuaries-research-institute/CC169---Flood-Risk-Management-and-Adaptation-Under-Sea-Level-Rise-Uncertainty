for( j in jmin:jmax){
P = P0*exp((2*j-i-1)*dx)
if(j<B[nt+1,2]-i1+1){F1[j]=0
} else if(j>= B[i,2]){F1[j]=P/(r-mu)-I
} else {
F1[j] = (qu*F2[j+1]+(1-qu)*F2[j])*Df
}
}
}
}
F1[1]
View(B)
1+1
q()
1
1+1
1
1+1
1
1
library('extRemes')
library('gsl')
library(zoo)
library(lubridate)
library(dplyr)
library(ggplot2)
1
1
1
11
quit()
1
1
load("C:/Users/matte/Desktop/SOA project/soa/soa/Model/empirical/copenhagen/ProjectValue_Sim_monthly.Rdata")
View(model_save)
mmodel_save
1
1
1
1
1
1
1
1
1
1
i=1
i
1
1
1
1
12*100
set.seed(100)
error = rnorm(n  = 1000,
mena = 0,
sd = 1)
c = 5.4
phi1 = 0.6
phi2 = -0.1
y = rep(NA,
1000)
y[1] = 0
y[2] = 0
for (i in 3:1000){
y[i] = c + phi1 * y[i-1] + phi2 * y[i-2] + error[i]
}
set.seed(100)
error = rnorm(n  = 1000,
mena = 0,
sd = 1)
set.seed(100)
error = rnorm(n  = 1000,
mean.default() = 0,
sd = 1)
c = 5.4
phi1 = 0.6
phi2 = -0.1
y = rep(NA,
1000)
y[1] = 0
y[2] = 0
for (i in 3:1000){
y[i] = c + phi1 * y[i-1] + phi2 * y[i-2] + error[i]
}
set.seed(100)
error = rnorm(n  = 1000,
mean = 0,
sd = 1)
c = 5.4
phi1 = 0.6
phi2 = -0.1
y = rep(NA,
1000)
y[1] = 0
y[2] = 0
for (i in 3:1000){
y[i] = c + phi1 * y[i-1] + phi2 * y[i-2] + error[i]
}
plot(y)
?acf
acf(y)
pacf(y)
ma = rep(NA,
1000)
ma[1] = 0
ma[2] = 0
for (i in 3:1000){
ar[i] = c + phi1 * y[i-1] + phi2 * y[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2]
}
c = 5.4
phi1 = 0.6
phi2 = -0.1
ar = rep(NA,
1000)
ar[1] = 0
ar[2] = 0
ma = rep(NA,
1000)
ma[1] = 0
ma[2] = 0
for (i in 3:1000){
ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2]
}
plot(ma)
plot(ar)
acf(ma)
pacf(ma)
ma = rep(NA,
1000)
ma[1] = 0
ma[2] = 0
for (i in 3:1000){
ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.8  * error[i-3]
}
ma[1] = 0
ma[2] = 0
for (i in 4:1000){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.8  * error[i-3]
}
acf(ma)
plot(ma)
ma = rep(NA,
1000)
ma[1] = 0
ma[2] = 0
ma[3] = 0
for (i in 4:1000){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.8  * error[i-3]
}
acf(ma)
pacf(ma)
?arima
arima(x = ma,
order = c(0,0,2))
arima(x = ma,
order = c(0,0,3))
wrong_model = arima(x = ma,
order = c(0,0,2))
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
acf(wrong_model$residuals)
wrong_model = arima(x = ma,
order = c(0,0,3))
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
acf(wrong_model$residuals)
wrong_model = arima(x = ma,
order = c(0,0,4))
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
wrong_model = arima(x = ma,
order = c(0,0,7))
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
wrong_model = arima(x = ma,
order = c(0,0,2))
acf(wrong_model$residuals)
pacf(wrong_model$residuals)
acf(ma)
?acf
ma_acf = acf(wrong_model$residuals)
ma_acf$acf
View(ma_acf)
acf(wrong_model$residuals,
lag.max = 7)
pacf(wrong_model$residuals,
lag.max = 7)
acf(ma,
lag.max = 7)
pacf(ma,
lag.max = 7)
ma_acf = acf(ma,
lag.max = 10)
ma_pacf = pacf(ma,
lag.max = 10)
ma_acf = acf(ma,
lag.max = 10)
ma_pacf = pacf(ma,
lag.max = 10)
ma_acf$acf
ma_pacf$acf
ma_acf = acf(ma,
lag.max = 10)
ma_pacf = pacf(ma,
lag.max = 10)
ma_pacf$acf
ma_pacf$acf
ma_acf$acf
ma = rep(NA,
1000)
ma[1] = 0
ma[2] = 0
ma[3] = 0
for (i in 4:1000){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.8  * error[i-3]
}
ma_acf = acf(ma,
lag.max = 10)
ma_acf$acf
ma_pacf = pacf(ma,
lag.max = 10)
ma_pacf$acf
ma_acf
acf(ma,
lag.max = 10)
wrong_model = arima(x = ma,
order = c(0,0,2))
wrong_acf = acf(wrong_model,
lag.max = 10)
wrong_model = arima(x = ma,
order = c(0,0,2))
wrong_acf = acf(wrong_model,
lag.max = 10)
wrong_pacf = acf(wrong_model,
lag.max = 10)
wrong_model = arima(x = ma,
order = c(0,0,2))
wrong_model
wrong_model = arima(x = ma,
order = c(0,0,3))
wrong_model
wrong_model = arima(x = ma,
order = c(0,0,2))
wrong_model
wrong_model = arima(x = ma,
order = c(0,0,3))
wrong_model
wrong_model = arima(x = ma,
order = c(0,0,2))
acf(wrong_model)
wrong_acf = acf(wrong_model$residuals,
lag.max = 10)
wrong_acf = acf(wrong_model$residuals,
lag.max = 10)
wrong_pacf = acf(wrong_model$residuals,
lag.max = 10)
wrong_acf = acf(wrong_model$residuals,
lag.max = 10)
wrong_pacf = pacf(wrong_model$residuals,
lag.max = 10)
wrong_acf = acf(wrong_model$residuals,
lag.max = 10)
wrong_acf$acf
ma_acf$acf
residual = rep(NA,
1000)
residual[1] = 0
residual[2] = 0
residual[3] = 0
for (i in 4:1000){
residual[i] = ma[i] - error[i] -error[i-1] - (1/3) * error[i-2]
}
acf(residual)
pacf(residual)
wrong_acf = acf(residual,
lag.max = 10)
wrong_acf$acf
wrong_pacf = pacf(residual,
lag.max = 10)
wrong_pacf$acf
acf(ma,
lag.max = 10)
pacf(ma,
lag.max = 10)
for (i in 4:1000){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.1  * error[i-3]
}
acf(ma,
lag.max = 10)
ma_acf$acf
sqrt(1000 - 1:10)
1:10
set.seed(100)
error = rnorm(n  = 100,
mean = 0,
sd = 3)
c = 5.4
phi1 = 0.6
phi2 = -0.1
ar = rep(NA,
100)
ar[1] = 0
ar[2] = 0
ma = rep(NA,
100)
ma[1] = 0
ma[2] = 0
ma[3] = 0
for (i in 4:1000){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.1  * error[i-3]
}
acf(ma,
lag.max = 10)
acf(ma)
for (i in 4:100){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.1  * error[i-3]
}
acf(ma)
############# R CODES FOR EXAM QUESTIONS (ACST 8085) ###########################
# True model
set.seed(100)
error = rnorm(n  = 100,
mean = 0,
sd = 3)
c = 5.4
phi1 = 0.6
phi2 = -0.1
ar = rep(NA,
100)
ar[1] = 0
ar[2] = 0
ma = rep(NA,
100)
ma[1] = 0
ma[2] = 0
ma[3] = 0
for (i in 4:100){
#ar[i] = c + phi1 *ar[i-1] + phi2 * ar[i-2] + error[i]
ma[i] = error[i] -error[i-1] - (1/3) * error[i-2] + 0.1  * error[i-3]
}
acf(ma)
0.4*5
dgpd0 <- function(x,m,s) { 1/s*exp(-(x-m)/s) }
NegativeXi =dgpd0(support,
m = 0,
s =1)
support = seq(-4,4,by = 0.01)
NegativeXi =dgpd0(support,
m = 0,
s =1)
plot(NegativeXi)
dgpd1 = function(x,m,s,xi){ 1/s * (1 + xi* ((x-m)/s))^((-1/xi) - 1)}
dgpd1 = function(x,m,s,xi){ 1/s * (1 + xi* ((x-m)/s))^((-1/xi) - 1)}
PositiveXi = dgpd1(x = support,
m = 0,
s = 1,
xi = 1.5)
plot(PositiveXi)
Negativexi = dgpd1(x = support,
m = 0,
s = 1,
xi = -1.5)
NegativeXi = dgpd1(x = support,
m = 0,
s = 1,
xi = -1.5)
plot(NegativeXi)
1/1.5
support = seq(0,1/1.5,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
dgpd1 = function(x,m,s,xi){ 1/s * (1 + xi* ((x-m)/s))^((-1/xi) - 1)}
PositiveXi = dgpd1(x = support,
m = 0,
s = 1,
xi = 1.5)
plot(PositiveXi)
support = seq(0,2,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
plot(ZeroXi)
support = seq(0,4,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
plot(ZeroXi)
support = seq(0,5,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
plot(ZeroXi)
support = seq(0,10,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
plot(ZeroXi)
dgpd1 = function(x,m,s,xi){ 1/s * (1 + xi* ((x-m)/s))^((-1/xi) - 1)}
PositiveXi = dgpd1(x = support,
m = 0,
s = 1,
xi = 1.5)
plot(PositiveXi)
NegativeXi = dgpd1(x = support,
m = 0,
s = 1,
xi = -1.5)
plot(NegativeXi)
df = data.frame(values = c(ZeroXi,
PositiveXi,
NegativeXi),
group = c(rep("zero xi",lenght(ZeroXi)),
rep("Positive xi",length((PositiveXi))),
rep("Negative xi", length(NegativeXi)))
)
df = data.frame(values = c(ZeroXi,
PositiveXi,
NegativeXi),
group = c(rep("zero xi",lenght(ZeroXi)),
rep("Positive xi",lenght((PositiveXi))),
rep("Negative xi", lenght(NegativeXi)))
)
df = data.frame(values = c(ZeroXi,
PositiveXi,
NegativeXi),
group = c(rep("zero xi",length(ZeroXi)),
rep("Positive xi",length((PositiveXi))),
rep("Negative xi", length(NegativeXi)))
)
library(ggplot2)
f = ggplot(data = df,
aes(x = support,
y = values,
color = group))
f = f + geom_line()
f
dgpd0 = function(x,m,s) { 1/s*exp(-(x-m)/s) }
support = seq(0,10,by = 0.01)
ZeroXi =dgpd0(support,
m = 0,
s =1)
plot(ZeroXi)
dgpd1 = function(x,m,s,xi){ 1/s * (1 + xi* ((x-m)/s))^((-1/xi) - 1)}
PositiveXi = dgpd1(x = support,
m = 0,
s = 1,
xi = 1.5)
plot(PositiveXi)
NegativeXi = dgpd1(x = support,
m = 0,
s = 1,
xi = -1.5)
plot(NegativeXi)
df = data.frame(values = c(ZeroXi,
PositiveXi,
NegativeXi),
group = c(rep("zero xi",length(ZeroXi)),
rep("Positive xi",length((PositiveXi))),
rep("Negative xi", length(NegativeXi)))
)
f = ggplot(data = df,
aes(x = support,
y = values,
color = group))
f = f + geom_line()
f
f = ggplot(data = df,
aes(x = rep(support,3),
y = values,
color = group))
f = f + geom_line()
f
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './output/'
fig=  './output/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
getwd()
setwd("C:/Users/matte/Desktop/SOA project/code_soa")
rm(list=ls(all=TRUE))
setwd("./Example/project_evaluation_nyc_example")
opath= './output/'
fpath= './../function/'
ftpath='./../fortran/'
tab=  './output/'
fig=  './output/'
file.sources = list.files(fpath, pattern="*.R$",full.names=TRUE, ignore.case=TRUE)
invisible(sapply(file.sources,source))
source(paste("parameters.R",sep=''))
source(paste("investment_analysis.R",sep=''))
source(paste("sensitivity_analysis_discount.R",sep=''))
source(paste("sensitivity_analysis_slr.R",sep=''))
source(paste("sensitivity_analysis_sigma.R",sep=''))
source(paste("loss_distribution_NYC.R",sep=''))
source(paste("sensitivity_analysis_loss_distribution.R",sep=''))
